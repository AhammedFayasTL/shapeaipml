import numpy as np
import pandas as pd
import sklearn 
 
from sklearn.datasets import load_boston
df=load_boston()

df.key()
//print(df.DESCR)
//print(df.feature_names)
//print(df.target)
//printf(df.data)

boston=pd.Dataframe(df.data, columns=df.feature_names)
boston.head()

boston['MEDV']=df.target

boston.isnull()

boston.isnull().sum()//0 and value

from sklearn.model_selection import train_test_split
x=boston.drop('MEDV',axis=1) //copy and delete medv
y=boston['MEDV']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.15, random_state=5)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.liner_model import LinearRegression
from sklearn.metrics import mean_squared_error
lin_model=LinearRegression()
lin_model.fit(x_train,y_train)


y_train_predict =lin_model.predict(x_train)
rmse=(np.sqrt(mean_squared_error(y_train,y_train_predict)))
print("the performance for training set")
print('RMSE is{}'.format(rmse))
print("\n")

y_test_predict =lin_model.predict(x_test)
rmse=(np.sqrt(mean_squared_error(y_test,y_test_predict)))
print("the performance for training set")
print('RMSE is{}'.format(rmse))
print("\n")






